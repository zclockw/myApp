#include <iostream>
#include <vector>
using namespace std;

struct Point {
	int x = 0;
	int y = 0;
};

int routecount = 0;
bool GoHorse(Point nowLoc);
bool Print();
vector<Point> route;
int nrow;
int ncol;
bool **baseMat;

int main() {
	
	int nowRow;
	int nowCol;

	cout << "请输入棋盘行数：" << endl;
	cin >> nrow;
	cout << "请输入棋盘列数：" << endl;
	cin >> ncol;
	cout << "请输入马当前位置（行）：" << endl;
	cin >> nowRow;
	cout << "请输入马当前位置（列）：" << endl;
	cin >> nowCol;

	baseMat = (bool**)malloc(nrow * sizeof(bool*));

	for (int i = 0; i < nrow; i++) {
		baseMat[i] = (bool*)malloc(ncol * sizeof(bool));
	}

	for (int i = 0; i < nrow; i++) {
		for (int j = 0; j < ncol; j++) {
			baseMat[i][j] = false;
		}
	}

	Point start;
	start.x = nowRow;
	start.y = nowCol;

	route.push_back(start);
	GoHorse(start);
	cout << "total:" << routecount << endl;
}

bool GoHorse(Point nowLoc) {
	if (nowLoc.x == route[0].x && nowLoc.y == route[0].y && route.size() > 1) {
		Print();
		return true;
	}

	if (nowLoc.x < 0 || nowLoc.x > nrow - 1 || nowLoc.y < 0 || nowLoc.y > ncol - 1) {
		return true;
	}

	if (baseMat[nowLoc.x][nowLoc.y] == true)
	{
		return true;
	}

	baseMat[nowLoc.x][nowLoc.y] = true; 

	Point newp;
	newp.x = nowLoc.x + 1;
	newp.y = nowLoc.y + 2;

	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	
	
	newp.x = nowLoc.x - 1;
	newp.y = nowLoc.y + 2;

	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();


	newp.x = nowLoc.x - 1;
	newp.y = nowLoc.y - 2;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	


	newp.x = nowLoc.x + 1;
	newp.y = nowLoc.y - 2;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	


	newp.x = nowLoc.x - 2;
	newp.y = nowLoc.y + 1;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	

	newp.x = nowLoc.x - 2;
	newp.y = nowLoc.y - 1;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	


	newp.x = nowLoc.x + 2;
	newp.y = nowLoc.y + 1;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();
	

	newp.x = nowLoc.x + 2;
	newp.y = nowLoc.y - 1;
	
	route.push_back(newp);
	GoHorse(newp);
	route.pop_back();

	baseMat[nowLoc.x][nowLoc.y] = false;

	return true;
}

bool Print() {
	
	int flag = -1;
	for (int i = 0; i < route.size(); i++) {
		Point pt = route[i];
		if (pt.x == 0 || pt.x == nrow - 1 || pt.y == 0 || pt.y == ncol - 1) {
			flag = 1;
		}
	}
	if (flag == 1 && route.size() > 3) {
		routecount++;
		cout << "找到一条路！" << endl;
		for (int i = 0; i < route.size(); i++) {
			cout << "x=" << route[i].x << "   " << "y=" << route[i].y << endl;
		}
	}
	
	return true;
}
